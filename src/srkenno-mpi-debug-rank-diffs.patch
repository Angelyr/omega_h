This patch adds a bunch of debug prints.
patch based on:
commit 8cfb2f02467b1cd4de9f452e0a17c19556424d82
Author: skennon10 <skennon10@users.noreply.github.com>
Date:   Tue Sep 14 09:07:06 2021 -0600

    v25: fix for -ldl undefined dclose ref from hdf5; fix compile errors; improve stacktrace on error by printing History stack frames.

diff --git a/src/Omega_h_array_ops.cpp b/src/Omega_h_array_ops.cpp
index 7ff3a82..2b275eb 100644
--- a/src/Omega_h_array_ops.cpp
+++ b/src/Omega_h_array_ops.cpp
@@ -496,6 +496,7 @@ Read<T> coalesce(std::vector<Read<T>> arrays) {
 int max_exponent(Reals a) {
   auto const init = ArithTraits<int>::min();
   if (a.size() == 0) {
+    //std::cout << "srk a.size=0" << std::endl;
     return init;
   }
   auto const first = IntIterator(0);
@@ -508,9 +509,9 @@ int max_exponent(Reals a) {
     return expo;
   };
   auto expo = transform_reduce(first, last, init, op, std::move(transform));
-  if (expo == init) {
-    return 0;
-  }
+  // if (expo == init) {
+  //   return 0;
+  // }
   return expo;
 }
 
@@ -538,20 +539,37 @@ Real repro_sum(Reals a) {
   }
   begin_code("repro_sum");
   int expo = max_exponent(a);
+  auto const init = ArithTraits<int>::min();
+  if (expo == init) return 0.0;
   double unit = exp2(double(expo - MANTISSA_BITS));
   Int128 fixpt_sum = int128_sum(a, unit);
+  double ret = fixpt_sum.to_double(unit);
+  if (debug_srk) std::cout << "srk expo= " << expo << " fixpt_sum= " << fixpt_sum.to_string() << " double= " << ret << std::endl;
   end_code();
-  return fixpt_sum.to_double(unit);
+  return ret;
 }
 
 Real repro_sum(CommPtr comm, Reals a) {
   begin_code("repro_sum(comm)");
-  int expo = comm->allreduce(max_exponent(a), OMEGA_H_MAX);
+  auto const init = ArithTraits<int>::min();
+  auto expo0 = max_exponent(a);
+  //std::cout << "srk expo0= " << expo0 << std::endl;
+  int expo = comm->allreduce(expo0, OMEGA_H_MAX);
   double unit = exp2(double(expo - MANTISSA_BITS));
   Int128 fixpt_sum = int128_sum(a, unit);
+  std::ostringstream oss;
+  if (debug_srk) {
+    oss << "P" << comm->rank() << ": srk expo0= " << expo0 << " expo global= " << expo << " fixpt_sum= " << fixpt_sum.to_string();
+  }
   fixpt_sum = comm->add_int128(fixpt_sum);
+  double ret = fixpt_sum.to_double(unit);
+  if (debug_srk) {
+    oss << " fixpt_sum global= " << fixpt_sum.to_string() << " double= " << ret << std::endl;
+    std::cout << oss.str() << std::endl;
+  }
   end_code();
-  return fixpt_sum.to_double(unit);
+  if (expo == init) return 0.0;
+  return ret;
 }
 
 void repro_sum(CommPtr comm, Reals a, Int ncomps, Real result[]) {
diff --git a/src/Omega_h_dbg.hpp b/src/Omega_h_dbg.hpp
index f8e0d91..f147484 100644
--- a/src/Omega_h_dbg.hpp
+++ b/src/Omega_h_dbg.hpp
@@ -18,6 +18,8 @@ extern bool dbg_print_global;
 
 #ifdef OMEGA_H_DBG
 
+extern bool debug_srk;
+
 namespace Omega_h {
 #ifdef OMEGA_H_USE_CUDA
 OMEGA_H_INLINE std::string proc() { return ""; }
diff --git a/src/Omega_h_fail.hpp b/src/Omega_h_fail.hpp
index 1e34299..714bf77 100644
--- a/src/Omega_h_fail.hpp
+++ b/src/Omega_h_fail.hpp
@@ -36,6 +36,10 @@ void fail(char const* format, ...);
 
 #define Omega_h_fail Omega_h::fail
 
+#define OMEGA_H_CHECK_HOST(cond)                                                    \
+      ((cond) ? ((void)0)                                                          \
+       : Omega_h::fail("assertion %s failed at %s +%d\n", #cond, __FILE__, __LINE__))
+
 #if defined(OMEGA_H_USE_CUDA) && (defined(__clang__) || defined(_MSC_VER))
 #  define OMEGA_H_CHECK(cond) assert(cond)
 #elif defined(__CUDA_ARCH__)
@@ -46,6 +50,7 @@ void fail(char const* format, ...);
        : Omega_h::fail("assertion %s failed at %s +%d\n", #cond, __FILE__, __LINE__))
 #endif
 
+#undef NDEBUG
 #ifndef NDEBUG
 #  define OMEGA_H_CHECK_MSG(cond, a) do {                   \
     if (!(cond)) std::cout << "ERROR: " << a << std::endl;  \
diff --git a/src/Omega_h_library.cpp b/src/Omega_h_library.cpp
index 93b7d07..ade5c53 100644
--- a/src/Omega_h_library.cpp
+++ b/src/Omega_h_library.cpp
@@ -12,6 +12,8 @@
 #include <sstream>
 #include <string>
 
+bool debug_srk = false;
+
 #ifdef OMEGA_H_DBG
 Omega_h::Comm *DBG_COMM = 0;
 bool dbg_print_global = false;
