cmake_minimum_required(VERSION 2.6)
project(omega_h CXX)

option(USE_MPI "Use MPI for parallelism" ON)
option(USE_KOKKOS "Use Kokkos for on-node parallelism" OFF)
option(USE_OPENMP "Use Kokkos+OpenMP for on-node parallelism" OFF)
option(USE_CUDA "Use Kokkos+CUDA for on-node parallelism" OFF)
set(CUDA_ARCH "37" CACHE STRING "compute capability for NVCC -arch=sm_?")
option(USE_ZLIB "Use zlib for file compression" ON)
option(CHECK_BOUNDS "Check array bounds (makes code slow too)" OFF)
option(DONT_OPTIMIZE "Disable compiler optimizations" OFF)

if(USE_KOKKOS)
  find_path(KOKKOS_INCLUDE Kokkos_Core.hpp)
  find_library(KOKKOS_LIB kokkos)
  include_directories(${KOKKOS_INCLUDE})
endif()

if(USE_ZLIB)
  find_package(ZLIB REQUIRED)
  include_directories(${ZLIB_INCLUDE_DIRS})
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang")
set(FLAGS "--std=c++11 -g -fno-omit-frame-pointer -ferror-limit=1")
set(FLAGS "${FLAGS} -Werror -Weverything -Wno-c++98-compat")
set(FLAGS "${FLAGS} -Wno-c++98-compat-pedantic -Wno-padded")
set(FLAGS "${FLAGS} -Wno-float-equal")
set(FLAGS "${FLAGS} -Wno-weak-template-vtables")
if(NOT DONT_OPTIMIZE)
  set(FLAGS "${FLAGS} -O2")
endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "GNU")
if(USE_CUDA)
set(FLAGS "--std=c++11 -O2 -g -Werror -Wall -Wextra")
set(FLAGS "${FLAGS} -expt-extended-lambda -arch=sm_${CUDA_ARCH}")
elseif(USE_OPENMP)
set(FLAGS "--std=c++11 -O2 -g -fno-omit-frame-pointer")
set(FLAGS "${FLAGS} -Werror -Wall -Wextra")
set(FLAGS "${FLAGS} -fopenmp")
else()
set(FLAGS "--std=c++11 -O2 -g -fno-omit-frame-pointer")
set(FLAGS "${FLAGS} -Werror -Wall -Wextra")
endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL "Intel")
set(FLAGS "-std=c++11 -O2 -g -debug")
if(USE_OPENMP)
set(FLAGS "${FLAGS} -qopenmp")
endif()
else()
message(FATAL_ERROR "Unexpected compiler type ${CMAKE_CXX_COMPILER_ID}")
endif()
set(CMAKE_CXX_FLAGS "${FLAGS}")

configure_file(config_in.hpp config.hpp)
include_directories(${CMAKE_CURRENT_BINARY_DIR})

add_library(omega_h omega_h.cpp)
if(USE_KOKKOS)
target_link_libraries(omega_h ${KOKKOS_LIB} dl)
endif()
if(USE_ZLIB)
target_link_libraries(omega_h ${ZLIB_LIBRARIES})
endif()

add_executable(unit_tests unit_tests.cpp)
target_link_libraries(unit_tests omega_h)
add_executable(perf_tests perf_tests.cpp)
target_link_libraries(perf_tests omega_h)
add_executable(mpi_tests mpi_tests.cpp)
target_link_libraries(mpi_tests omega_h)
add_executable(osh_convert convert.cpp)
target_link_libraries(osh_convert omega_h)
add_executable(ex1 ex1.cpp)
target_link_libraries(ex1 omega_h)
